module top(clk_50,key,en,led,seg,sel);
input clk_50,en;
input [6:0]key;
output [6:0]led;
output [7:0]seg;
output [7:0]sel;
wire q;
wire number;
wire clk_div;
clk_div   U1(.clk_50(clk_50),.clk_div(clk_div),.f(10));
led		 U2(.key(key),.clk_div(clk_div),.led(led),.en(en),.number(number));
smg		 U3(.clk_50(clk_50),.q(number),.seg(seg),.sel(sel));

endmodule


module  clk_div(clk_50,f,clk_div);
input  	clk_50;   
input  	[31 : 0]f;
output  	clk_div;  
reg  	clk_div;
reg  	[31 : 0]ACC;  
always  @(posedge clk_50)  begin  
	if(ACC < 24999999) ACC = ACC + f;
	else begin  ACC=0;  clk_div=!clk_div;	end
end
endmodule




module led(key,clk_div,led,en,number);
input clk_div,en;
input [6:0]key;
output reg [3:0]number;
output reg [6:0]led;
reg a;
reg [4:0]b;
reg [4:0]c;
reg flag;
always@(posedge clk_div) begin
if(en==0) begin if(c<20) begin c=c+1;end else begin c=0;a=a+1;end end

case(a)
0:begin number=3;led=7'b0000111;end
1:begin task_led();end
endcase


end

task task_led();
begin

if(key[0]==0) 
begin 
if(b<20)  b=b+1;
else begin
if(flag==0) begin flag=1;led[0]=0;number=number+1;end
else begin flag=0;led[0]=1;end
end
end
//else  led[0]=1;


else if(key[1]==0) 
begin if(b<20) begin b=b+1;end 
else begin
if(flag==0) begin flag=1;led[1]=0;number=number+1;end
else begin flag=0;led[0]=1;end
 end
 end
//else begin led[1]=1;end



else if(key[2]==0) 
begin if(b<20) begin b=b+1;end 
else begin
if(flag==0) begin flag=1;led[2]=0;number=number+1;end
else begin flag=0;led[2]=1;end
 end
 end
else begin led[2]=1;end


else if(key[3]==0) 
begin if(b<20) begin b=b+1;end 
else begin
if(flag==0) begin flag=1;led[3]=0;number=number+1;end
else begin flag=0;led[3]=1;end
 end
 end
//else begin led[3]=1;end


if(key[4]==0) 
begin if(b<20) begin b=b+1;end 
else begin
if(flag==0) begin flag=1;led[4]=0;number=number+1;end
else begin flag=0;led[4]=1;end
 end
 end
else begin led[4]=1;end


if(key[5]==0) 
begin if(b<20) begin b=b+1;end 
else begin
if(flag==0) begin flag=1;led[5]=0;number=number+1;end
else begin flag=0;led[5]=1;end
 end
 end
else begin led[5]=1;end


if(key[5]==0) 
begin if(b<20) begin b=b+1;end 
else begin
if(flag==0) begin flag=1;led[5]=0;number=number+1;end
else begin flag=0;led[5]=1;end
 end
 end
else begin led[5]=1;end


if(key[6]==0) 
begin if(b<20) begin b=b+1;end 
else begin
if(flag==0) begin flag=1;led[6]=0;number=number+1;end
else begin flag=0;led[6]=1;end
 end
 end
else begin led[6]=1;end


end
endtask

endmodule




module  smg(clk_50,q,seg,sel); 
input clk_50;
input [3:0]q; 
output [7:0]seg; 
output [7:0]sel;
reg clk_scan;
reg [31:0]c;
always @(posedge clk_50) begin  
	if(c<24999999) c=c+500;  //分频得到500hz的扫描时钟
	else begin c=0; clk_scan =! clk_scan; end
end

reg [2:0]scan; 
always @(posedge clk_scan) scan=scan+1; 

reg [31:0]num; 
reg [7:0]sel;

always @(posedge clk_50)  begin 
  case(scan) 
    0:begin sel=8'B1111_1110;  num=q[ 3: 0]; end
    1:begin sel=8'B1111_1101;  num=10; end
    2:begin sel=8'B1111_1011;  num=10;	end
    3:begin sel=8'B1111_0111;  num=10; end
    4:begin sel=8'B1110_1111;  num=10; end
    5:begin sel=8'B1101_1111;  num=10; end
    6:begin sel=8'B1011_1111;  num=10; end
    7:begin sel=8'B0111_1111;  num=10; end
  endcase
end

assign seg = 	(num==0)? 8'B0000_0011:	//显示"0"
			(num ==1)? 8'B1001_1111:	//显示"1"
			(num ==2)? 8'B0010_0101:	//显示"2"
			(num ==3)? 8'B0000_1101:	//显示"3"
			(num ==4)? 8'B1001_1001:	//显示"4"
			(num ==5)? 8'B0100_1001:	//显示"5"
			(num ==6)? 8'B0100_0001:	//显示"6"
			(num ==7)? 8'B0001_1111:	//显示"7"
			(num ==8)? 8'B0000_0001:	//显示"8"
			(num ==9)? 8'B0000_1001:	//显示"9"
(num ==10)? 8'B1111_1101:	 //显示"-"
	        8'B1111_1111;  //熄灭
endmodule
